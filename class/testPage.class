<?php

if ($_GET['page']) {
  $_GET['page'] = htmlentities($_GET['page']);
}

class testPage {
  var $config;
  var $menu;
  var $titleInfo;
  var $form;

  function __construct($configNew) {
    $this->config = array(
      'formMerchantid'  => '',
      'formReferer'     => '',
      'formApproveurl'  => '',
      'formCancelurl'   => '',
      'formDeclineurl'  => '',
      'formAmount'      => rand(10, 99) . '0.' . (($a= rand(0,99)) < 10 ? '0' . $a : $a) ,
      'formAmount100'   => FALSE,
      'formCurrency'    => '810', // 810 / 643 / 840 / 978
      'formDescription' => 'Описание товара - ' . date('ymd_His'),
      'formLanguage'    => 'RU',
      'formUserEmail'       => 'mail@mail',
      'formVendorID'        => '001',
      'formPaymentParams'   => '+79111321012',
      'formFee'             => '21'
    );

    if (is_array($configNew) && count($configNew)) {
      foreach ($configNew as $key => $value) {
        if ($value) {
          $this->config[$key] = $value;
        }
      }

      if ($this->config['formAmount100']) {
        $this->config['formAmount'] *= 100;
      }
    }


    $this->titleInfo = array(
      'merchantid'  => '',
      'referer'     => '',
      'approveurl'  => '',
      'cancelurl'   => '',
      'declineurl'  => '',
      'amount'      => 'Сумма транзакции в минимальных единицах валюты транзакции',
      'currency'    => 'Код валюты транзакции (например, 643 – рубли, 840 – доллары США)',
      'description' => 'Текстовое описание заказа, которое будет отображено для клиента при выполнении платежа в TWEC PG',
      'language'    => 'Язык интерфейса. Заполняется в соответствии с RFC 1766 двухсимвольным кодом языка (например, RU – русский, EN – английский, UK – украинский и т. д.). По умолчанию EN',
      'userEmail'       => 'E-mail клиента (дополнительный параметр), который будет сохранен в поле Email в БД TWEC PG',
      'vendorID'        => 'Идентификатор вендора',
      'paymentParams'   => 'Параметры платежа (реквизиты вендора). Если необходимо передать несколько информационных полей, то требуется их разделить символом \'/\' (код 0x2F). Если в параметрах платежа необходимо передать спецсимволы «/» и «\», то их требуется экранировать по правилам: символ «\» заменять на «\\»; символ «/» заменять на «\/». Количество передаваемых полей должно совпадать с количеством полей в описании вендора в TWO/TranzAxis',
      'origAmount'      => 'Оригинальная сумма транзакции в минимальных единицах оригинальной валюты транзакции. Если данный параметр задан, то в транзакции, передаваемой в TWO, будет заполнено подполе D поля a протокола TPTP',
      'origCurrency'    => 'Оригинальная валюта транзакции. Если данный параметр задан, то в транзакции, передаваемой в TWO, будет заполнено подполе O поля a протокола TPTP',
      'fee'             => 'Эквайринговая комиссия. При использовании данного параметра в заказе будет заполнено подполе F поля a в протоколе TPTP финансовой транзакции'

    );

    $this->menu = array(
      'form_001' => 'Создание заказа на покупку (Purchase)',
      'form_002' => 'Создание заказа на покупку квази-наличных (QuasiCash)',
      'form_003' => 'Получение статуса заказа (GetOrderStatus)',
      'form_004' => 'Создание заказа на платеж (Payment)',
      'option'   => 'Настройки'
    );

    $this->form = array(
      'form_001' => array(
        'action' => 'Purchase',
        'row'    => array(
          'referer'     => $this->config['formReferer'],
          'amount'      => $this->config['formAmount'],
          'currency'    => $this->config['formCurrency'],
          'description' => $this->config['formDescription'],
          'approveurl'  => $this->config['formApproveurl'],
          'cancelurl'   => $this->config['formCancelurl'],
          'declineurl'  => $this->config['formDeclineurl'],
          'language'    => $this->config['formLanguage']
        )
      ),
      'form_002' => array(
        'action' => 'QuasiCash',
        'row'    => array(
          'referer'      => $this->config['formReferer'],
          'amount'       => $this->config['formAmount'],
          'currency'     => $this->config['formCurrency'],
          'description'  => $this->config['formDescription'],
          'approveurl'   => $this->config['formApproveurl'],
          'cancelurl'    => $this->config['formCancelurl'],
          'declineurl'   => $this->config['formDeclineurl'],
          'language'     => $this->config['formLanguage'],
          'OrigAmount'   => '',
          'OrigCurrency' => ''
        )
      ),
      'form_003' => array(
        'action' => 'GetOrderStatus',
        'row'    => array(
          'OrderID'   => '@encrypted@1@1DDC9A843D966657',
          'SessionID' => '@encrypted@1@DF9B1AD02A1A81AAD9164EA4703A3087F6EBBAD71B617F301415B574C8B4F261794145531D13FE71',
          'language'  => $this->config['formLanguage']
        )
      ),
      'form_004' => array(
      'action' => 'Payment',
      'row'    => array(
        'referer'       => $this->config['formReferer'],
        'amount'        => $this->config['formAmount'],
        'currency'      => $this->config['formCurrency'],
        'description'   => $this->config['formDescription'],
        'approveurl'    => $this->config['formApproveurl'],
        'cancelurl'     => $this->config['formCancelurl'],
        'declineurl'    => $this->config['formDeclineurl'],
        'language'      => $this->config['formLanguage'],
        'userEmail'     => $this->config['formUserEmail'],
        'vendorID'      => $this->config['formVendorID'],
        'origAmount'    => $this->config['formOrigAmount'],
        'origCurrency'  => $this->config['formOrigCurrency'],
        'paymentParams' => $this->config['formPaymentParams'],
        'fee'           => $this->config['formFee']
      )
    ),
    );
  }

  function showPage() {
    $contet = '<html>
    <head>
      <title>Test eCom</title>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
      <meta http-equiv="Content-Language" content="ru">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link type="text/css" rel="stylesheet" href="css/styles.css?v=' . filemtime('css/styles.css') . '">
      <script type="text/javascript" src="js/jquery.min.js"></script>
      <script type="text/javascript" src="js/jquery-ui.js"></script>
      <script type="text/javascript" src="js/script.js?v=' . filemtime('js/script.js') . '"></script>
    </head>
    <body>
    ' . $this->menu() . '
    <h2>' . $this->menu[$_GET['page']] . '</h2>
    <div class="form">' . $this->showContent() . '</div>
    <div class="show_result"></div>
    </body>
    </html>';
    return $contet;
  }

  private function showContent() {
    if ($this->menu[$_GET['page']]) {
      if ($this->form[$_GET['page']]) {
        return $this->createForm($_GET['page']);
      } else if($_GET['page'] == 'option') {
        return $this->showOption();
      } else {
        return 'Выберите форму из меню';
      }
    }
  }

  private function createForm($formId) {
    $form = $this->form[$formId];
    $form['row']['action'] = $form['action'];
    $html = array();

    $html[] = '<form method="post" id="' . $form['action'] . '" class="form-ecom form-ecom-submit">';
    $html[] = '<ul>';

    if (count($form['row'])) {
      foreach ($form['row'] as $key => $value) {
        $status = NULL;
        if (in_array($key, array('url', 'merchantid', 'action'))) {
          $status = ' READONLY';
        }

        if ($this->titleInfo[$key]) {
          $title = ' title="'.$this->titleInfo[$key].'" style="cursor: help;"';
        } else {
          $title = '';
        }

        $html[] = '<li>
          <div class="name"' . $title . '>' . $key . '</div>
          <div class="field"><input type="text" name="' . $key . '" value="' . $value . '"' . $status . '></div>
        </li>';
      }
    }

    $html[] = '<li>
      <div class="name">&nbsp;</div>
      <div class="field"><input type="submit" name="submit" value="submit"></div>
    </li></ul></form>';
    return implode('', $html);
  }

  private function showOption() {
    $configFile = $this->config['configFile'];
    $fileName = $_SERVER['DOCUMENT_ROOT'] . $configFile;
    if (file_exists($fileName)) {
      $html = array();

      if ($_POST || $_FILES) {
        $config = array();
        include $fileName;
        $eCommerceConfig = $config;
        $html[] = $this->updateOption($eCommerceConfig);
      }

      include $fileName;
      $eCommerceConfig = $config;

      $html[] = '<form method="post" id="Option" class="form-ecom" enctype="multipart/form-data"><ul>';
      foreach ($this->config['configArray'] as $item) {
        $html[] = '<li>
          <div class="name">'.$item.'</div>
          <div class="field"><input type="text" name="'.$item.'" value="'.$eCommerceConfig[$item].'"></div>
        </li>';
      }

      $html[] = '<li>
        <div class="name">fileCert</div>
        <div class="field"><input type="file" name="fileCertUpload"></div>
      </li>';

      $html[] = '<li>
        <div class="name">fileCertKey</div>
        <div class="field"><input type="file" name="fileCertKeyUpload"></div>
      </li>';


      $html[] = '<li>
        <div class="name">&nbsp;</div>
        <div class="field"><input type="submit" name="submit" value="submit"></div>
      </li>';
      $html[] = '</ul></form>';

      return implode('', $html);
    } else {
      return 'Не удалось загрузить файл конфигурации: ' . $fileName;
    }

    return $text;
  }

  private function updateOption($eCommerceConfig) {
    $html = array();

    if (isset($_POST)) {
      $countAll = count($_POST) - 1;
      $i = 0;
      $text = array();
      $text[] = '<?php';
      $text[] = '$config = array(';
      foreach ($_POST as $key => $value) {
        $i++;
        if ($key != 'submit') {
          if ($countAll == $i) {
            $z = '';
          } else {
            $z = ',';
          }
          $text[] = '  \''.$key.'\' => \''.$value.'\'' . $z;
        }
      }
      $text[] = ');';
      $text[] = '?>';

      $fileName = $_SERVER['DOCUMENT_ROOT'] . $this->config['configFile'];

      if (is_writable($fileName)) {
        $content = implode("\n",$text);
        if ($handle = fopen($fileName, 'w')) {
          fwrite($handle, $content);
          fclose($handle);
        }
      }
    }

    if (isset($_FILES)) {
      if ($_FILES['fileCertUpload']['name']) {
        if ($this->uploadFile($eCommerceConfig, $_FILES['fileCertUpload'], 'fileCert')) {
          $html[] = 'Сертификат загружен<br>';
        } else {
          $html[] = 'Сертификат не загружен<br>';
        }
      }
      if ($_FILES['fileCertKeyUpload']['name']) {
        if ($this->uploadFile($eCommerceConfig, $_FILES['fileCertKeyUpload'], 'fileCertKey')) {
          $html[] = 'Ключ загружен<br>';
        } else {
          $html[] = 'Ключ не загружен<br>';
        }
      }
    }

    return implode('', $html);
  }

  private function uploadFile($eCommerceConfig, $array, $fileName) {
    if ($array['error'] == 0) {
      $destiation = $_SERVER['DOCUMENT_ROOT'] . $eCommerceConfig[$fileName];
      if (file_exists($destiation)) {
        unlink($destiation);
      }
      move_uploaded_file($array['tmp_name'], $destiation);
      return true;
    } else {
      return false;
    }
  }

  private function menu() {
    $menuStr = array();
    foreach ($this->menu as $key => $value) {
      $class = $key == $_GET['page'] ? 'active' : '';
      $menuStr[] = '<li class="' . $class . '"><a href="?page=' . $key . '">' . $value . '</a></li>' . "\n";
    }
    return '<ul class="menu">' . implode('', $menuStr) . '</ul>';
  }
}

?>