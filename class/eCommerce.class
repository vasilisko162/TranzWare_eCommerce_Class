<?php
/**
 * Created by Vasiliy Ivanov
 * client: Bank SIAB
 * version: 0.0.5
 * date: 25.04.2019
 * email: vasilisko@gmail.com
 */

class eCommerce {
  var $result = array();
  var $config;
  var $log    = array();
  var $curlData;

  function __construct($configNew = array()) {
    $this->result = array(
      'status'   => 'error',
      'data'     => array(),
      'response' => array()
    );
    $this->config = array(
      'url'                    => '',             // адрес для выполнения запроса
      'merchantid'             => '',
      'area'                   => 'development',  // development / production
      'logShow'                => FALSE,          // write / print / FALSE
      'logCurl'                => 'standart',     // standart / full
      'dirLog'                 => 'log',
      'fileCert'               => '',             // Ссылка на сертификат
      'fileCertKey'            => '',             // Ссылка на ключ для сертификата
      'data'                   => 'json',         // json / text формат возврата данных
      'curl_referer'           => '',             // Страница, откуда идет запрос
      'curl_Ssl'               => FALSE,          // отправка сертификата
      'curl_sslVerifypeer'     => FALSE,
      'curl_timeout'           => '5',            // максимальное количество секунд для выполнения функций cURL.
      'curl_connectionTimeout' => '2',            // количество секунд ожидания при попытке подключения.
      'curl_header'            => array(
        'Content-Type' => 'text/xml'
      )
    );

    if (is_array($configNew) && count($configNew)) {
      foreach ($configNew as $key => $value) {
        $this->config[$key] = $value;
      }
    }

    $this->checkConfig();
  }

  function exec_GetOrderStatus($array) {
    $this->log[] = 'Выполняется GetOrderStatus';
    $this->checkArray($array, array(
      'OrderID',
      'SessionID'
    ));

    $xml = array();
    $xml[] = '<TKKPG>';
      $xml[] = '<Request>';
        $xml[] = '<Operation>GetOrderStatus</Operation>';
        $xml[] = '<Language>' . $this->config['language'] . '</Language>';
        $xml[] = '<Order>';
          $xml[] = '<Merchant>' . $this->config['merchantid'] . '</Merchant>';
          $xml[] = '<OrderID>' . $array['OrderID'] . '</OrderID>';
        $xml[] = '</Order>';
        $xml[] = '<SessionID>' . $array['SessionID'] . '</SessionID>';
      $xml[] = '</Request>';
    $xml[] = '</TKKPG>';

    $xmlSend = implode('', $xml);

    $this->curlExecute($xmlSend);

    $order = $this->result['response']['Order'];
    if (!$order['OrderID'] || !$order['OrderStatus']) {
      $this->returnWithError('response');
    }

    $this->result['data'] = array(
      'OrderID'     => $order['OrderID'],
      'OrderStatus' => $order['OrderStatus']
    );
    $this->result['operation'] = $this->result['response']['Operation'];
    $this->result['status'] = 'accept';
    return $this->returnResult();
  }

  function exec_QuasiCash($array) {
    $this->log[] = 'Выполняется CreateOrder - QuasiCash';
    $this->checkArray($array, array(
      'amount',
      'currency',
      'description',
      'approveurl',
      'cancelurl',
      'declineurl'
    ));

    $xml = array();
    $xml[] = '<TKKPG>';
      $xml[] = '<Request>';
        $xml[] = '<Operation>CreateOrder</Operation>';
        $xml[] = '<Language>' . $this->config['language'] . '</Language>';
        $xml[] = '<Order>';
          $xml[] = '<OrderType>QuasiCash</OrderType>';
          $xml[] = '<Merchant>' . $this->config['merchantid'] . '</Merchant>';
          $xml[] = '<Amount>' . ($array['amount'] * 100) . '</Amount>';
          $xml[] = '<Currency>' . $array['currency'] . '</Currency>';
          $xml[] = '<Description>' . $array['description'] . '</Description>';
          $xml[] = '<ApproveURL>' . $array['approveurl'] . '</ApproveURL>';
          $xml[] = '<CancelURL>' . $array['cancelurl'] . '</CancelURL>';
          $xml[] = '<DeclineURL>' . $array['declineurl'] . '</DeclineURL>';
          $xml[] = '<AddParams>';
            $xml[] = '<OrigAmount>' . $array['OrigAmount'] . '</OrigAmount>';
            $xml[] = '<OrigCurrency>' . $array['OrigCurrency'] . '</OrigCurrency>';
          $xml[] = '</AddParams>';
        $xml[] = '</Order>';
      $xml[] = '</Request>';
    $xml[] = '</TKKPG>';

    $xmlSend = implode('', $xml);

    $this->curlExecute($xmlSend);

    $order = $this->result['response']['Order'];
    if (!$order['OrderID'] || !$order['SessionID'] || !$order['URL']) {
      $this->returnWithError('response');
    }

    $this->result['data'] = array(
      'URL'       => $order['URL'],
      'OrderID'   => $order['OrderID'],
      'SessionID' => $order['SessionID'],
      'urlFull'   => $order['URL'] . '?OrderID=' . $order['OrderID'] . '&SessionID=' . $order['SessionID']
    );
    $this->result['operation'] = $this->result['response']['Operation'];
    $this->result['status'] = 'accept';
    return $this->returnResult();
  }

  function exec_Purchase($array) {
    $this->log[] = 'Выполняется CreateOrder - Purchase';
    $this->checkArray($array, array(
      'amount',
      'currency',
      'description',
      'approveurl',
      'cancelurl',
      'declineurl'
    ));

    $language = $this->config['language'];
    if ($array['language']) {
      $language = $array['language'];
    }

    $xml = array();
    $xml[] = '<TKKPG>';
      $xml[] = '<Request>';
        $xml[] = '<Operation>CreateOrder</Operation>';
        $xml[] = '<Language>' . $language . '</Language>';
        $xml[] = '<Order>';
          $xml[] = '<Merchant>' . $this->config['merchantid'] . '</Merchant>';
          $xml[] = '<OrderType>Purchase</OrderType>';
          $xml[] = '<Amount>' . ($array['amount'] * 100) . '</Amount>';
          $xml[] = '<Currency>' . $array['currency'] . '</Currency>';
          $xml[] = '<Description>' . $array['description'] . '</Description>';
          $xml[] = '<ApproveURL>' . $array['approveurl'] . '</ApproveURL>';
          $xml[] = '<CancelURL>' . $array['cancelurl'] . '</CancelURL>';
          $xml[] = '<DeclineURL>' . $array['declineurl'] . '</DeclineURL>';
          $xml[] = '<AddParams>';
            $xml[] = '<OrigAmount/>';
            $xml[] = '<OrigCurrency/>';
          $xml[] = '</AddParams>';
        $xml[] = '</Order>';
      $xml[] = '</Request>';
    $xml[] = '</TKKPG>';

    $xmlSend = implode('', $xml);

    $this->curlExecute($xmlSend);

    $order = $this->result['response']['Order'];
    if (!$order['OrderID'] || !$order['SessionID'] || !$order['URL']) {
      $this->returnWithError('response');
    }

    $this->result['data'] = array(
      'URL'       => $order['URL'],
      'OrderID'   => $order['OrderID'],
      'SessionID' => $order['SessionID'],
      'urlFull'   => $order['URL'] . '?OrderID=' . $order['OrderID'] . '&SessionID=' . $order['SessionID']
    );
    $this->result['operation'] = $this->result['response']['Operation'];
    $this->result['status'] = 'accept';
    return $this->returnResult();
  }

  function exec_Payment($array) {
    $this->log[] = 'Выполняется CreateOrder - Payment';
    $this->checkArray($array, array(
      'amount',
      'currency',
      'description',
      'approveurl',
      'cancelurl',
      'declineurl'
    ));

    $xml = array();
    $xml[] = '<TKKPG>';
      $xml[] = '<Request>';
        $xml[] = '<Operation>CreateOrder</Operation>';
        $xml[] = '<Language>' . $this->config['language'] . '</Language>';
        $xml[] = '<Order>';
          $xml[] = '<OrderType>Payment</OrderType>';
          $xml[] = '<Merchant>' . $this->config['merchantid'] . '</Merchant>';
          $xml[] = '<Amount>' . ($array['amount'] * 100) . '</Amount>';
          $xml[] = '<Currency>' . $array['currency'] . '</Currency>';
          $xml[] = '<Description>' . $array['description'] . '</Description>';
          $xml[] = '<ApproveURL>' . $array['approveurl'] . '</ApproveURL>';
          $xml[] = '<CancelURL>' . $array['cancelurl'] . '</CancelURL>';
          $xml[] = '<DeclineURL>' . $array['declineurl'] . '</DeclineURL>';
          $xml[] = '<AddParams>';
            $xml[] = '<UserEmail>' . $array['userEmail'] . '</UserEmail>';
            $xml[] = '<VendorID>' . $array['vendorID'] . '</VendorID>';
            $xml[] = '<OrigAmount>' . $array['origAmount'] . '</OrigAmount>';
            $xml[] = '<OrigCurrency>' . $array['origCurrency'] . '</OrigCurrency>';
            $xml[] = '<PaymentParams>' . $array['paymentParams'] . '</PaymentParams>';
          $xml[] = '</AddParams>';
          $xml[] = '<Fee>' . $array['fee'] . '</Fee>';
        $xml[] = '</Order>';
      $xml[] = '</Request>';
    $xml[] = '</TKKPG>';

    $xmlSend = implode('', $xml);

    $this->curlExecute($xmlSend);

    $order = $this->result['response']['Order'];
    if (!$order['OrderID'] || !$order['SessionID'] || !$order['URL']) {
      $this->returnWithError('response');
    }

    $this->result['data'] = array(
      'URL'       => $order['URL'],
      'OrderID'   => $order['OrderID'],
      'SessionID' => $order['SessionID'],
      'urlFull'   => $order['URL'] . '?OrderID=' . $order['OrderID'] . '&SessionID=' . $order['SessionID']
    );
    $this->result['operation'] = $this->result['response']['Operation'];
    $this->result['status'] = 'accept';
    return $this->returnResult();
  }

  private function checkArray($array, $arrayValue) {
    if (!is_array($array)) {
      $this->returnWithError('data');
    }
    foreach ($arrayValue as $item) {
      if (!$array[$item]) {
        $this->returnWithError('data', 'Не получена переменная ' . $item);
      }
    }
    return TRUE;
  }

  private function returnWithError($type = '', $str = '') {
    $this->result['status'] = 'error';
    switch ($type) {
      case 'status':
        $type = 'by response status';
        $this->result['data']['status'] = $this->result['response']['Status'];
        break;
      case 'curl':
        $type = 'execute error';
        break;
      case 'response':
        $this->log[] = 'Получена не вся информация от Банка';
        break;
      case 'data':
        $this->log[] = 'Получена не вся информация';
        break;
      case 'http_code':
        $this->log[] = 'Сервер вернул страницу с ошибкой';
        break;
      default:
        $this->log[] = 'Произошла неизвестная ошибка';
    }

    if ($str) {
      $this->log[] = $str;
    }

    $this->log[] = 'ОШИБКА ' . $type;
    $this->showLog();
    echo $this->returnResult();
    die();
  }

  private function curlExecute($xml) {

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $this->config['url']);
    curl_setopt($ch, CURLOPT_REFERER, $this->config['curl_referer']);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $this->returnHeader($this->config['curl_header']));
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->config['curl_connectionTimeout']);
    curl_setopt($ch, CURLOPT_TIMEOUT, $this->config['curl_timeout']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);

    if ($this->config['curl_Ssl']) {
      $certificate = $_SERVER['DOCUMENT_ROOT'] . $this->config['fileCert']; // CERTIFICATE
      $privateKey = $_SERVER['DOCUMENT_ROOT'] . $this->config['fileCertKey']; // PRIVATE KEY

      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); //  запретит проверки сертификата удаленного сервера
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);     //  1 означает проверку существования имени, значение 2 - кроме того, и проверку соответствия имени хоста.

      curl_setopt($ch, CURLOPT_SSLCERT, $certificate);
      curl_setopt($ch, CURLOPT_SSLKEY, $privateKey);

      $this->log[] = 'Подключение сертификатов:';
      $this->log[] = 'CERTIFICATE: ' . $certificate;
    }


    $logExecute = array();
    $time['start'] = microtime(1);
    $result = array(
      'main'      => curl_exec($ch),
      'getinfo'   => curl_getinfo($ch),
      'errno'     => curl_errno($ch),
      'error'     => curl_error($ch),
      'status'    => 'access',
      'time_work' => '0'
    );

    curl_close($ch);

    $time['end'] = microtime(1);
    $result['time_work'] = round($time['end'] - $time['start'], 2);

    if (($result['errno'] || $result['getinfo']['http_code'] > 200)) {
      $result['status'] = 'error';
      $result['err_status'] = 2;
      if ($result['errno']) {
        $result['err_text'] = ' Error #' . $result['errno'] . ': ' . $result['error'] . '. ';
      }
      if ($result['getinfo']['http_code'] > 200) {
        $result['err_text'] = ' Http code: ' . $result['getinfo']['http_code'] . '. ';
      }
      $result['err_text'] .= ' Host: ' . $result['getinfo']['url'];
    }

    $logExecute[] = '- Status: <b>' . $result['status'] . '</b>. ';

    if ($result['errno']) {
      $logExecute[] = '- Error #' . $result['errno'] . ': ' . $result['error'] . '. ';
    }
    if ($result['getinfo']['http_code']) {
      $logExecute[] = '- Http code: ' . $result['getinfo']['http_code'] . '. ';
    }
    if ($result['time_work']) {
      $logExecute[] = '- Time script: ' . $result['time_work'] . ' sec. ';
    }
    if ($result['getinfo']['url']) {
      $logExecute[] = '- Url: ' . $result['getinfo']['url'] . '. ';
    }

    if ($this->config['logShow']) {
      $this->log[] = 'curl Execute';
      $this->log[] = '<br>' . implode('<br>', $logExecute);
    }

    if ($this->config['logCurl'] == 'full') {
      if ($xml) {
        $xmlShow = str_replace('><',">\n<", $xml);
        $this->log[] = '$xml:<br><textarea>' . $xmlShow . '</textarea>';
      }
      if (is_array($result) && count($result)) {
        $this->log[] = 'mainData:<br><textarea>' . print_r($result, TRUE) . '</textarea>';
      }
      if ($result['main']) {
        $this->log[] = 'main:<br><textarea>' . $result['main'] . '</textarea>';

      }
      if ($result['getinfo']) {
        $this->log[] = 'getinfo:<br><textarea>' . print_r($result['getinfo'], TRUE) . '</textarea>';
      }
      if ($result['response']) {
        $this->log[] = 'response:<br><textarea>' . print_r($this->result['response'], TRUE) . '</textarea>';
      }

      if ($result['error'] && $this->config['showError']) {
        $this->log[] = $result['error']['message'] . '(' . $result['error']['code'] . ')';
      }
    }

    if ($result) {
      if ($result['error']) {
        $this->returnWithError('curl');
      } else if ($result['getinfo']['http_code'] != '200') {
        $this->returnWithError('http_code');
      } else {
        $temp = $this->convertXmlToArray($result['main']);
        $this->result['response'] = $temp['Response'];
        if ($this->result['response']['Status'] != '00') {
          $this->returnWithError('status');
        }
        return TRUE;
      }
    } else {
      $this->returnWithError('data');
    }
    return FALSE;
  }

  private function convertXmlToArray($xml) {
    libxml_use_internal_errors(TRUE);
    $xml ? $result = json_decode(json_encode(simplexml_load_string($xml)), TRUE) : $result = FALSE;
    return $result;
  }

  private function showLog() {
    if ($this->config['logShow']) {
      $this->result['log'] = implode('<br>', $this->log);
    }
  }

  private function returnResult() {
    unset($this->result['response']);
    $this->showLog();
    if ($this->config['data'] == 'json') {
      return $this->returnResultJson();
    } else {
      return $this->result;
    }
  }

  private function returnResultJson() {
    return json_encode($this->result);
  }

  private function returnHeader($array) {
    $headerArray = array();
    if (is_array($array)) {
      foreach ($array as $sParam => $sVal) {
        $headerArray[] = $sParam . ': ' . $sVal;
      }
    }
    return $headerArray;
  }

  private function checkConfig() {
    $configCheck = TRUE;
    $textError[] = '<b color="red">Config error</b>. ';
    if (!$this->config['url']) {
      $configCheck = FALSE;
      $textError[] = 'Не указан <b>url</b>';
    }
    if (!$this->config['merchantid']) {
      $configCheck = FALSE;
      $textError[] = 'Не указан <b>merchantid</b>';
    }
    if ($this->config['curl_Ssl']) {
      if (!$this->config['fileCert'] || !is_file($_SERVER['DOCUMENT_ROOT'] . $this->config['fileCert'])) {
        $configCheck = FALSE;
        $textError[] = 'Не указан <b>fileCert</b> или сертификат не найден';
        $textError[] = 'dir: ' . $_SERVER['DOCUMENT_ROOT'] . $this->config['fileCert'];
      } else if (!$this->config['fileCertKey'] || !is_file($_SERVER['DOCUMENT_ROOT'] . $this->config['fileCertKey'])) {
        $configCheck = FALSE;
        $textError[] = 'Не указан <b>fileCertKey</b> или ключ для сертификата не найден';
        $textError[] = 'dir: ' . $_SERVER['DOCUMENT_ROOT'] . $this->config['fileCertKey'];
      }
    }


    if (!$configCheck) {
      foreach ($textError as $item) {
        $this->log[] = $item;
      }
      $this->returnWithError('check config');
    }
  }

  function exec_CreateOrder_GetOrderStatus($array) {
    self::exec_GetOrderStatus($array);
  }
  function exec_CreateOrder_QuasiCash($array) {
    self::exec_QuasiCash($array);
  }
  function exec_CreateOrder_Purchase($array) {
    self::exec_Purchase($array);
  }
}